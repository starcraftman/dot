# This file contains all bash modifications apart from .bashrc.

# Neat bash tricks, http://blog.sanctum.geek.nz/category/bash
# Some other tricks, http://www.tldp.org/LDP/abs/html/sample-bashrc.html
# List of BASH vals https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html

# When debugging bash, $LINENO refers to current line of script
# Also $RANDOM gives val from 0-32767, `shuf` command for ranges
# Note that `caller expr` builtin prints call stack, where expr is framenumber.
# Uses BASH_LINENO BASH_SOURCE & FUNCNAME arrays
############################################################################
# Path Settings
############################################################################
#{{{
. ~/.shell_conf/path_env

# Old Java paths, archived
#ANDR=$HOME/.android/
#ANDROID=$ANDR/tools:$ANDR/platform-tools:$ANDR/android-ndk
#export CLASSPATH=$SOFT/jlibs:$JAVA_HOME/lib:/usr/share/ant/lib:/usr/share/java:$CLASSPATH
#export GRADLE_HOME=$SOFT/gradle
#export GROOVY_HOME=$SOFT/groovy
#export PATH=$GROOVY_HOME/bin:$GRADLE_HOME/bin:$JAVA_HOME/bin:$ANDROID:$PATH

#export CPATH=$SOFT/libs/include:$CPATH
#export LIBRARY_PATH=$SOFT/libs/lib:$LIBRARY_PATH
#}}}
############################################################################
# Environment Variables
############################################################################
#{{{
# Common variables defined at: ~/.shell_conf/path_env

# Bash history file
export HISTFILE=~/.bash_history

# Color code explanation, end of -> http://jamiedubs.com/ps1-collection-customize-your-bash-prompt
# Old code (might still see): \[\033[x;yy;zzm\]
# General format: \[\e[x;yy;zzm\]
# Style code x: 1 -> bold, 4 -> underline, 7 -> invert color.
# Color code, yy -> 30s for foreground, zz-> background in 40s.
count=1
for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval "export T_$color='\e[0;3${count}m'"
    eval "export T_B$color='\e[1;3${count}m'"
    eval "export PS1_$color='\[\e[0;3${count}m\]'"
    eval "export PS1_B$color='\[\e[1;3${count}m\]'"
    (( count = count + 1 ))
done
unset count

export T_RESET='\e[0m'
export PS1_R="\[\e[0m\]"
#}}}
############################################################################
# Aliases
############################################################################
#{{{
# Common aliases stored with funcs at: ~/.shell_conf/funcs_alias
# Sourced in Functions
#}}}
############################################################################
# Functions
############################################################################
#{{{
. ~/.shell_conf/funcs_alias


# Toggles bash debug mode, when on:
#  * Turns on tracing of every command (xtrace).
#  * Prevents unsetting vars (nounset).
#  * Prints lines before execution (verbose).
#  * Disables bash prompt to avoid pollution with xtrace.
# TODO: Fix this up
# debug() {
    # # If command is blank, turn off debug mode
    # if [ "x" == "x${PROMPT_COMMAND}" ]; then
        # #set +o nounset
        # set +o extdebug
        # set +o verbose
        # set +o xtrace
        # export PROMPT_COMMAND="$OLD_PROMPT_COMMAND"
        # unset OLD_PROMPT_COMMAND
        # export PS1="$OLD_PS1"
        # unset OLD_PS1
        # echo -e "Bash Debug Mode: ${T_BRED}DISABLED${T_RESET}"
    # else
        # OLD_PROMPT_COMMAND="$PROMPT_COMMAND"
        # export PROMPT_COMMAND=""
        # OLD_PS1="$PS1"
        # export PS1="$PS1_BRED >>DEBUG<< $PS1_R$PS1"
        # #set -o nounset
        # set -o extdebug
        # set -o verbose
        # set -o xtrace
        # echo -e "Bash Debug Mode: ${T_BGREEN}ENABLED${T_RESET}"
        # echo -e "Careful with ${T_BRED}nounset${T_RESET} breaks some completion."
    # fi
# }

# Repeat a command n times, example:
  # repeat 10 echo foo
# **RESERVED** in ZSH
repeatn() {
    if [ "$#" -lt 3 ]; then
        echo -e "Repeat a command n times, example:
        repeat 10 echo foo"
        return 0
    fi

    local count="$1"
    shift
    for _ in $(seq 1 "$count"); do
        eval "$@"
    done
}
#}}}
############################################################################
# Misc Options
############################################################################
#{{{
# Common misc at: ~/.shell_conf/funcs_alias
#}}}
############################################################################
# BASH Settings
############################################################################
#{{{
# https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html
# Set debug flags permanently on
#set -o nounset
#set -o xtrace

# Brace expand allows: echo a{b,c}e -> abe ace
set -o braceexpand

# Bg jobs notify immediately on terminate, else only when next prompt draw
set -o notify

# http://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# If arg to cd doesn't exist, must be var to expand
#shopt -s cdable_vars

# When making small typos with cd, go to best match
shopt -s cdspell

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Multiline commands to be on single lines in history
shopt -s cmdhist

# Ensure extended globbing allowed
# http://www.linuxjournal.com/content/bash-extended-globbing
shopt -s extglob

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# Always append instead of overwriting history
shopt -s histappend

# Don't expand empty commands
shopt -s no_empty_cmd_completion

# Shell not needed for mail checking
shopt -u mailwarn
unset MAILCHECK
#}}}
############################################################################
# Specific Completions
############################################################################
# {{{
valid_name pip && eval "$(pip completion --bash)"
[[ -f "$RVMPATH/scripts/completion" ]] && . "$RVMPATH/scripts/completion"
[[ -d "$SHELLD/completion-ruby/" ]] && . "$SHELLD/completion-ruby/completion-ruby-all"
# }}}
############################################################################
# PS1 Bash Propmt
############################################################################
#{{{
# ALL PS1 past this point. This stuff used to modify the bash prompt to show
# the status of git and hg repos as well as move directory line up one.
# See Environment Variables for color code explanation

# I am modifying the PS1 prompt to give info for both git and hg vcs.
# This callback fetches the hg stuff to insert only if in hg repo, looks like bash-git-prompt message.
# HG Prompt: http://sjl.bitbucket.org/hg-prompt/
# Git Prompt: https://github.com/magicmonty/bash-git-prompt
prompt_callback() {
    local p_line HG T
    p_line="${PS1_BMAGENTA}{branch}${PS1_R}{ ${PS1_RED}↓{incoming|count}${PS1_R}}"
    p_line="${p_line}{${PS1_GREEN}↑{outgoing|count}${PS1_R}}|${PS1_YELLOW}{status}{update}${PS1_R}"
    HG=$(hg prompt "[${p_line}]" 2>/dev/null)

    # Strip everything except where status to outgoing would be.
    T=${HG##*|}
    T=${T%%]}

    # Insert check mark only if T doesn't contain other codes like status or update, see regexp.
    if [ "x${HG}" != "x" ] && [[ ! ${T} =~ [!?^↓↑] ]]; then
        HG="${HG%%]}${PS1_BGREEN}✔${PS1_R}]"
    fi

    # Print don't print extra space unless need to.
    if [ "x$HG" == "x" ]; then
        echo -e -n ""
    else
        echo -e -n " $HG"
    fi

    # Flush commands as written, helps when multiple terminals open from a user
    history -a
}

# See ~/.git-prompt-colors.sh for scheme
. ~/.shell/bash-git-prompt/gitprompt.sh

# }}}

# Local config override (~/.lbashrc)
# Put any server specific changes or overrides here
if [ -s ~/.lbashrc ]; then
   . ~/.lbashrc
fi

# vim:set filetype=sh foldmethod=marker:
