# This config is based on a combination of existing .bashrc & .bash_aliases in
# this directory, adapted to work on zsh.
# Large number of configs:
# http://stackoverflow.com/questions/171563/whats-in-your-zshrc
# For more info, also consult man pages starting with zsh...
############################################################################
# Path Settings
############################################################################
# #{{{
. ~/.shell_conf/path_env

# # Path to lookup functions
fpath=(~/.shell/zsh-completions/src $fpath)
fpath=(~/.zsh_completions.d $fpath)
# #}}}
# ############################################################################
# Environment Variables
############################################################################
#{{{
# Common variables defined at: ~/.shell_conf/path_env

# Ensure correct shell set.
export SHELL=/bin/zsh

# ZSH history separate
export HISTFILE=~/.zsh_history

# No git state caching, prefer to always be accurate
export ZSH_THEME_GIT_PROMPT_NOCACHE=1
#}}}
############################################################################
# Aliases
############################################################################
#{{{
# Common aliases stored with funcs at: ~/.shell_conf/funcs_alias
# Sourced in Functions

# Zsh only aliases
alias help='run-help'
#}}}
############################################################################
# Functions
############################################################################
#{{{
. ~/.shell_conf/funcs_alias

# # Toggles bash debug mode, when on:
# #  * Turns on tracing of every command (xtrace).
# #  * Prevents unsetting vars (nounset).
# #  * Prints lines before execution (verbose).
# #  * Disables bash prompt to avoid pollution with xtrace.
# #
# #  N.B. zsh bug that xtrace can't be set in a function
# # TODO: Fix up for zsh
# function debug() {
    # # If ps1 contains debug word, turn off debug mode
    # if contains "$PS1" "DEBUG"; then
        # PS1="$PS1_STD"
        # #unsetopt nounset
        # unsetopt sourcetrace
        # unsetopt verbose
        # unsetopt warncreateglobal
        # #unsetopt xtrace
        # save_hooks 0
        # print "Bash Debug Mode: ${fg_bold[red]}DISABLED${reset_color}"
        # return 1
    # else
        # PS1="$PS1_DEBUG"
        # #setopt nounset
        # setopt sourcetrace
        # setopt verbose
        # unsetopt warncreateglobal
        # #setopt xtrace
        # save_hooks 1
        # print "Bash Debug Mode: ${fg_bold[green]}ENABLED${reset_color}"
        # print "Careful with ${fg_bold[red]}nounset${reset_color} breaks some completion."
        # return 0
    # fi
# }

# Get information on current system
ii() {
    TOP=$(top -n 1 -o %CPU | sed '/^$/d' | head -n 12 | tail -n 11)
    print
    print "${fg_bold[blue]}$USERNAME${reset_color} is logged on ${fg_bold[blue]}$HOST${reset_color}"
    print "${fg_bold[blue]}Additionnal information :${reset_color} " ; uname -a
    print "${fg_bold[blue]}Users logged on :${reset_color} " ; w -hs |
             cut -d " " -f1 | sort | uniq
    print "${fg_bold[blue]}Current date :${reset_color} " ; date
    print "${fg_bold[blue]}Machine stats :${reset_color} " ; uptime
    print "${fg_bold[blue]}Diskspace :${reset_color} "
    if valid_name dfc; then
        dfc
    else
        mounts=( "${(@f)$(mount -v | awk '/\/dev\/s/ { print $3 }')}" )
        prettyDf $mounts
        unset mounts
    fi
    print "${fg_bold[blue]}Memory stats :${reset_color} " ; free -h
    print "${fg_bold[blue]}Top 5 CPU% :${reset_color} " ; print "$TOP" | head -n 2 ; print "$TOP" | tail -n 6
    print "${fg_bold[blue]}Top 5 MEM% :${reset_color} " ; top -n 1 -o %MEM | sed '/^$/d' | head -n 12 | tail -n 5
    print "${fg_bold[blue]}Network Interfaces :${reset_color}" ; listNics
    print "${fg_bold[blue]}Open connections :${reset_color} "; netstat -pan --inet;
    print
    unset TOP
}
#}}}
############################################################################
# Misc Options
############################################################################
#{{{
# Common misc at: ~/.shell_conf/funcs_alias
#}}}
############################################################################
# ZSH Settings
############################################################################
# Autoload some libs
# Zcalc is a neat cmdline calculator
autoload -U zcalc

# Load zsh shell colors
autoload -U colors && colors
# Loaded colors will be in associated arrays called: fg_no_bold, fg_bold, bg
#   KEYS: red green yellow blue magenta cyan black white
# RESET COLOR $reset_color
# EXAMPLE: print "$fg_no_bold[red] hello $reset_color"

# Allows us to override shell hooks like for before prompt
autoload -U add-zsh-hook

# Use vcs info for bzr & svn
autoload -Uz vcs_info

# {{{ Completion
# Case insensitive
autoload -U compinit
compinit

## case-insensitive (all),partial-word and then substring completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' \
    'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Faster completion with cache
zstyle ':completion::complete:*' use-cache 1

# Don't complete directory we are already in (../here)
zstyle ':completion:*' ignore-parents parent pwd

# generate descriptions with magic.
zstyle ':completion:*' auto-description 'specify: %d'

# # Don't prompt for a huge list, page it!
zstyle ':completion:*:default' list-prompt '%S%M matches%s'

# # Don't prompt for a huge list, menu it if over 2 eles!
zstyle ':completion:*:default' menu 'select=2'

# # Have the newer files first or alphabtical
zstyle ':completion:*' file-sort modification
#zstyle ':completion:*' file-sort alpha

# # color code completion!!!!  Wohoo!
#zstyle ':completion:*' list-colors "=(#b) #([0-9]#)*=36=31"
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Don't complete stuff already on the line for commands in regex
zstyle ':completion::*:(ag|ack|cp|git|hg|mv|rm|tp|vi|vim):*' ignore-line true

# Group completions by type & have blue header above.
#zstyle ':completion:*:descriptions' format $'\e[00;34m%d'
#zstyle ':completion:*:messages' format $'\e[00;31m%d'
#zstyle ':completion:*' group-name ''

# Separate man page sections.  Neat.
zstyle ':completion:*:manuals.*'  group-name   true
zstyle ':completion:*:manuals.*'  insert-sections   true
zstyle ':completion:*:manuals'    separate-sections true
zstyle ':completion:*:man:*'      menu yes select

# Make kill/killall work better
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=29=34"
zstyle ':completion:*:*:killall:*' menu yes select
zstyle ':completion:*:killall:*' force-list always

# Ignore certain files or directories, better than fignore
zstyle ':completion:*:*files' ignored-patterns '*?.(o|class|pyc)' '*?~'
zstyle ':completion:*:*:cd:*' ignored-patterns '(*/|)(bzr|git|hg|svn)'

# Settings for vcs_info
zstyle ':vcs_info:*' enable bzr cvs svn
zstyle ':vcs_info:*' check-for-changes true
# Staged Unstaged [Branch] vcs_type-repo_name
zstyle ':vcs_info:*' formats "%{$fg[green]%}%c%{$reset_color%} %{$fg[red]%}%u%{$reset_color%} [%{$fg_bold[magenta]%}%b%{$reset_color%}] %{$fg_bold[cyan]%}%r%{$reset_color%} <%{$fg[yellow]%}%s%{$reset_color%}>"
# }}}
# Specific Extra Completions

valid_name pip && eval "$(pip completion --zsh)"
valid_name pyenv && eval "$(pyenv init -)"
# Not great but acceptable, not commonly used
compdef _gnu_generic ctags

# {{{ Options
# History should append if multiple versions run
setopt APPEND_HISTORY

# History saves beginning and elapsed time for commands
setopt EXTENDED_HISTORY

# History writing better on nfs
setopt HIST_FCNTL_LOCK

# History lookup ignores duplicate commands
# setopt HIST_FIND_NO_DUPS

# Ignore duplicates if they are same as previous.
setopt HIST_IGNORE_DUPS

# Ignore the history command itself
# setopt HIST_NO_STORE

# Reduce blanks when possible
setopt HIST_REDUCE_BLANKS

# If need to share history or write immediately
# see SHARE_HISTORY, INC_APPEND_HISTORY, INC_APPEND_HISTORY_TIME
# setopt SHARE_HISTORY
setopt INC_APPEND_HISTORY_TIME

# Allow braces to define character classes like: file{abcd1234}
setopt BRACE_CCL

# Use extended globbing
setopt EXTENDED_GLOB

# Use ksh globing, brings leading @, +() etc...
setopt KSH_GLOB

# WRT above, see: http://zsh.sourceforge.net/Doc/Release/Expansion.html#Filename-Generation

# Enable rematch (=~) to use pcre instead of shell regex.
#setopt REMATCH_PCRE

# Correct spelling mistakes only on commands
setopt CORRECT

# pushd -> pushd $HOME
setopt PUSHD_TO_HOME

# Don't exit with ctrl + D
setopt IGNORE_EOF

# Two single quotes escape to one in single quotes
setopt RC_QUOTES

# Jobs print in long format for more info
setopt LONG_LIST_JOBS

# Enable prompt var substitution & root/user bang.
setopt PROMPT_BANG
setopt PROMPT_SUBST

# RM star commands wait before proceeding.
setopt RM_STAR_WAIT

# Use vim mode
setopt VI

# Zero index arrays, like normal people
#setopt KSH_ARRAYS

#}}}
############################################################################
# Vim Key Bindings
############################################################################
#{{{
# When in completion, move backwards, key is shift+tab
bindkey '^[[Z' reverse-menu-complete

# History lookup bindings to usual r key
bindkey '^r' history-incremental-search-backward
bindkey '^s' history-incremental-search-forward

# Backspace deletes past start
bindkey '^?' backward-delete-char

# Scroll up or down a completion list
bindkey '^j' down-line-or-history
bindkey '^k' up-line-or-history

# Use my normal jk map to escape insert mode
bindkey 'jk' vi-cmd-mode

# vim-like undo and redo
bindkey -M vicmd 'u' undo
bindkey -M vicmd '^R' redo

# it's like, space AND completion. Allows for expansion of hist cmds,
# example: $1<space>
bindkey -M viins ' ' magic-space

# oh wow!  This is killer...  try it!
# Pushes current line onto a stack, comes off after next prompt
bindkey -M vicmd "q" push-line-or-edit
#}}}
############################################################################
# PS1 Prompt
############################################################################
#{{{
# Following section just for $vim_mode var hence here.
vim_ins_mode="%{$fg_bold[red]%}[INS]%{$reset_color%}"
vim_cmd_mode="%{$fg_bold[blue]%}[CMD]%{$reset_color%}"
vim_mode=$vim_ins_mode

function zle-keymap-select() {
    vim_mode="${${KEYMAP/vicmd/${vim_cmd_mode}}/(main|viins)/${vim_ins_mode}}"
    zle reset-prompt
}
zle -N zle-keymap-select

function zle-line-finish() {
    vim_mode=$vim_ins_mode
}
zle -N zle-line-finish

# HG prompt like bash-git-prompt
function hg_prompt() {
    local p_line="${fg_bold[magenta]}{branch}${reset_color}{ ${fg[red]}↓{incoming|count}${reset_color}}"
    p_line="${p_line}{ ${fg[green]}↑{outgoing|count}${reset_color}}|${fg[yellow]}{status}{update}${reset_color}"
    local HG=$(hg prompt "[${p_line}]" 2>/dev/null)

    # Strip everything except where status to outgoing would be.
    local T=${HG##*|}
    T=${T%%]}

    # Insert check mark only if T doesn't contain other codes like status or update, see regexp.
    if [ "x${HG}" != "x" ] && [[ ! ${T} =~ [!?^↓↑] ]]; then
        HG="${HG%%]}${fg_bold[green]}✔${reset_color}]"
    fi

    echo "$HG"
}

function prompt_precmd() {
    if [ $? -eq 0 ]; then
        LAST="%F{green}✔%f"
    else
        LAST="%F{red}✘%F{yellow}-$?%f"
    fi

    vcs_info
}

# Save hooks if arge is 1, else restore them.
# Needed for debug function above, or if I just want to disabe.
function save_hooks {
    if [ "$1" = "1" ]; then
        chpwd_functions=
        precmd_functions=
        preexec_functions=
    else
        add-zsh-hook precmd prompt_precmd
        source ~/.shell/zsh-git-prompt/zshrc.sh
        # Shell highlighting
        source ~/.shell/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    fi
}

# Just aliases for common colors used later.
PS1_DIR=%B%F{red}%~%f%b
PS1_USER=%F{cyan}%n%f
PS1_HOST=%F{green}%m%f

# If root, highlight it
if [ $UID -eq 0 ]; then
    PS1_USER=%B%F{yellow}%n%f%b
fi

# If using ssh, usually set
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || [ -n "$SSH_CONNECTION" ];then
    PS1_HOST=%B%F{red}%m%f%b
fi

if [ "x" = "x$TMUX" ]; then
    PS1_STD='$LAST { ${PS1_DIR} } $(hg_prompt)$(git_super_status)${vcs_info_msg_0_}
${PS1_USER}@${PS1_HOST}%# '
    PS1_DEBUG='%B%F{red} >>DEBUG<< %f%b$LAST { ${PS1_DIR} }
${PS1_USER}@${PS1_HOST}%# '
else
    PS1_STD='$LAST { ${PS1_DIR} } $(hg_prompt)$(git_super_status)${vcs_info_msg_0_}
${PS1_USER}%# '
    PS1_DEBUG='%B%F{red} >>DEBUG<< %f%b$LAST { ${PS1_DIR} }
${PS1_USER}%# '
fi
PS1="$PS1_STD"
RPROMPT='${vim_mode}'

# Zsh will print when users log in
watch=all                # watch all logins
logcheck=30              # every 30 seconds
WATCHFMT="%n from %M has %a tty%l at %T %W"

# Activate the prompt hooks for git/hg
save_hooks 0
#}}}

# Local config override (~/.lzshrc)
# Put any server specific changes or overrides here
if [ -s ~/.lzshrc ]; then
   . ~/.lzshrc
fi

# vim:set filetype=zsh foldmethod=marker:
