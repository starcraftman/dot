# Should be sourced after path changes
if ! valid_name >/dev/null 2>&1; then
   echo "Cannot find valid_name, check the \$PATH";
   return
fi

############################################################################
# Aliases
############################################################################
#{{{
# Note: First word of alias is expanded as alias, others ignored. Hence ll, expands ls.

# Keep home configs when switching to root
alias su='su --preserve-environment'

# Make ls more convenient
alias l='\ls --color=auto -F --group-directories-first'
alias ls='l --sort=extension'
alias ll='ls -Alh'
alias la='l -A'

# Different sorts
alias lx='ll -XB'  # Extension
alias lk='ll -Sr'  # File size
alias lt='ll -tur' # Access time
alias lc='ll -tcr' # CTime, last change to attributes (fperms, ownership)
alias lm='ll -tr'  # Modification time

# Recursive cp
alias cpr='cp -r'

# Always create non-existing parent dirs
alias mkdir='mkdir -vp'

# Man for use when searching local built libs.
alias manl='man -M libs/share/man'

# Alias for use of pushd/popd
alias pu="pushd"
alias po="popd"

# Grep should always print line
alias grep='grep --color=auto -n --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.bzr --exclude-dir=.svn --exclude-dir=.cvs'
# Re alias these to take advantage of above
alias egrep='grep -E'
alias fgrep='grep -F'
alias rgrep='grep -r'

# Default ack options, use smart case, sort output by file and follow symlinks.
# Filter by type with --type, supported types `ack --help-types`
if valid_name ack; then
    alias ack='ack --smart-case --sort-files --follow --color-match="bold blue"'
    # Alias for ack find file by name
    alias ackf='ack -g'
    # Alias for ack find file by contents
    alias ackl='ack -il'
fi

# Alias for silver search
# For type use --type, i.e. --cpp. supported types -> 'ag --list-file-types
if valid_name ag; then
    alias ag='ag --smart-case --follow --color-match="1;34"'
    # Alias for ag find file by name
    alias agf='ag -g'
    # Alias for ag find file by contents
    alias agl='ag -il'
fi

# Always open with splits
if valid_name nvim; then
   alias n='nvim'
   alias ns='nvim -o'
fi

if valid_name vim; then
   alias v='vim'
   alias vs='vim -o'
fi

# For vims java eclipse completion
if valid_name eclimd; then
    alias eclimd='eclimd -b -Xss4m -Xms1024m -Xmx2048m'
fi

# Alias for ps, sorts like pstree
alias pst="ps -eH"

# type used to determine what command is, list all entries
alias types='type -a'

# df/du defaults, du -L to follow symlinks
alias df='df -hT'
alias du='du -h'
if valid_name dfc; then
    alias dfc='dfc -T'
fi

# Add an "alert" alias for long running commands. Example:
#   sleep 10; alert
if valid_name notify-send; then
    alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
fi

# Apt aliases
if valid_name apt; then
    alias apti='sudo apt install'
    alias aptr='sudo apt remove'
    alias aptu='sudo apt update && sudo apt dist-upgrade && sudo apt autoremove'
elif valid_name apt-get; then
    alias apti='sudo apt-get -y install'
    alias aptr='sudo apt-get -y remove'
    alias aptu='sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get autoremove'
fi

# Colored cat output
if valid_name pygmentize; then
    alias ccat='pygmentize -g'
fi

# Alias for color tools.
if valid_name colordiff; then
    alias cod='colordiff'
fi
if valid_name colorgcc; then
    alias cog='colorgcc'
fi
if valid_name colormake; then
    alias com='colormake'
fi

# Silence parallel
if valid_name parallel; then
    alias parallel='parallel --no-notice'
fi

# Useful pstree highlight current parents
if valid_name pstree; then
    alias pstree='pstree -hn'
fi

# Shutdown the current machine immediately
if valid_name shutdown; then
    alias off='sudo shutdown now'
    alias restart='sudo shutdown -r now'
fi

# Force 256 colors, woe is me without
if valid_name tmux; then
    alias tmux='tmux -2'
fi

# Use trash instead of RM, have had bad accidents. Need trash-cli library for python.
if valid_name trash-put; then
    alias trash-restore='restore-trash'
    alias tre='restore-trash'
    alias tp='trash-put'
    alias tl='trash-list'
    alias te='trash-empty'
fi

# Tree program, use instead of recursive ls. Very pretty.
if valid_name tree; then
    alias tree='tree -Csuh'
fi

# Aliases for vimpager
if valid_name vimpager; then
    alias vcat='vimcat'
    alias vpager='vimpager'
fi

if valid_name sed; then
    alias strip_colors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"'
fi

if valid_name vagrant; then
    alias revagrant='vagrant destroy -f && vagrant up && vagrant ssh'
fi

# KDE < 4 it is plasma-desktop, >=5 plasmashell
if valid_name plasma-desktop; then
    alias krestart='killall plasma-desktop && kstart plasma-desktop >/dev/null 2>&1 &'
elif valid_name plasmashell; then
    alias krestart='killall plasmashell && kstart plasmashell >/dev/null 2>&1 &'
fi

if valid_name rsync; then
    alias xcp='rsync --progress -rv'
fi

if [ -d "$SHELLD/bfg" ]; then
   alias bfg="java -jar \$SHELLD/bfg/bfg.jar"
fi
#}}}
############################################################################
# Functions
############################################################################
# {{{
# # Discourage using darngerouns rm.
rm() {
    echo 'Do not use.'
    echo 'If essential: rrm file'
    false
}

# See what will be deleted, then confirm
rrm() {
    echo -e "Execute: ${T_BCYAN}rm -rf $@ ${T_RESET}"
    echo "y/n?"
    read
    local go
    go="$(echo "$REPLY" | tr '[:upper:]' '[:lower:]')"
    if [[ "$go" == y* ]]; then
        command rm -rf "$@"
    fi
}

# Help selecting colors
# Check if term supports 256 -> http://www.robmeerman.co.uk/unix/256colours
color_test() {
    echo -e "${T_RED}T_RED\t\t${T_BRED}T_BRED"
    echo -e "${T_YELLOW}T_YELLOW\t${T_BYELLOW}T_BYELLOW"
    echo -e "${T_CYAN}T_CYAN\t\t${T_BCYAN}T_BCYAN"
    echo -e "${T_BLUE}T_BLUE\t\t${T_BBLUE}T_BBLUE"
    echo -e "${T_MAGENTA}T_MAGENTA\t${T_BMAGENTA}T_BMAGENTA"
    echo -e "${T_WHITE}T_WHITE\t\t${T_BWHITE}T_BWHITE"
    echo -e "${T_RESET}"
    wget -O - http://www.robmeerman.co.uk/_media/unix/256colors2.pl | perl
}

# Secure delete a file
secDel() {
    echo -e "Will Securely Delete: ${T_BCYAN}${T_RESET}"
    echo "y/n?"
    read
    local go
    go="$(echo "$REPLY" | tr '[:upper:]' '[:lower:]')"
    if [[ "$go" == y* ]]; then
        shred -vzn 3 "$@"
        command rm -rf "$@"
    fi
}

# Shorthand for tee
t() {
    if [ $# -lt 1 ]; then
        echo 'Give me a command!'
        return
    fi

    local log
    log=tee.log
    if [ -e "$log" ]; then
        echo "Deleting log before run."
        command rm "$log"
    fi

   "$@" 2>&1 | tee "$log"
}

# Reruns the last command with sudo.
please() {
    local cmd
    cmd="$(fc -l -n -2 | head -n 1 | sed -e "s/^[ \t]*//")"
    echo -e "Execute with sudo: ${T_BCYAN}${cmd}${T_RESET}";
    echo "y/n?"
    read
    local go
    go="$(echo "$REPLY" | tr '[:upper:]' '[:lower:]')"
    if [[ "$go" == y* ]]; then
        sudo "$cmd"
    fi
}

# Take a directory. If it doesn't exist, make it.
take() {
    local dir="$1"
    mkdir "$dir"
    cd "$dir"
}

# Function to go back up when deep in directories.
# Example: .. 3 == cd ../../..
..() {
    if [ "$1" -ge 0 ] 2> /dev/null; then
        x=$1
    else
        x=1
    fi

    for (( i = 0; i < x; i++ )); do
        cd ..
    done
}


batCheck() {
    if valid_name upower; then
        upower -i /org/freedesktop/UPower/devices/battery_BAT0
    elif valid_name acpi; then
        acpi -i -b
    else
        echo 'Install acpi or upower commands.'
    fi
}

# Check if connection up at all by pinging google dns
conTest() {
    for url in "8.8.8.8" "1.1.1.1"; do
        ping -c 3 $url
    done
}

# Format a json file to be pretty
jsonFix() {
    for file ; do
        python -m json.tool < "$file" > "fix_$file"
    done
}

# Useful functions inspired by:
#http://www.tldp.org/LDP/abs/html/sample-bashrc.html
# Get info on all network interfaces
listNics() {
    local INTS=($(ifconfig -s | awk ' /^wlan.*|eth.*/ { print $1 }'))
    # Ample use of awk/sed for field extraction.
    local MAC IP BCAST MASK IP6
    for INT in "${INTS[@]}" ; do
          MAC=$(ifconfig "$INT" | awk '/Waddr/ { print $5 } ')
           IP=$(ifconfig "$INT" | awk '/inet / { print $2 } ' | sed -e s/addr://)
        BCAST=$(ifconfig "$INT" | awk '/inet / { print $3 } ' | sed -e s/Bcast://)
         MASK=$(ifconfig "$INT" | awk '/inet / { print $4 } ' | sed -e s/Mask://)
          IP6=$(ifconfig "$INT" | awk '/inet6/ { print $3 } ')

        echo -e "Interface: ${T_BGREEN}$INT${T_RESET}"
        echo -e "\tMac:   ${MAC}"
        echo -e "\tIPv4:  ${IP:-"Not connected"}"
        if [[ -n ${IP} ]]; then
            echo -e "\tBCast: ${BCAST}"
            echo -e "\tMask:  ${MASK}"
            echo -e "\tIPv6:  ${IP6:-"N/A."}"
        fi
    done
}

# Pretty print of df, like dfc.
prettyDf() {
    for fs ; do

        if [ ! -d $fs ]; then
            echo -e $fs" :No such file or directory"
            continue
        fi

        local info free nbstars out
        info=( $(command df -P "$fs" | awk 'END{ print $2,$3,$5 }') )
        free=$(command df -Pkh "$fs" | awk 'END{ print $4 }')
        nbstars=$(( 20 * info[1] / info[0] ))
        out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
               out="${out}*"
            else
               out="${out}-"
            fi
        done
        out="${info[2]} $out] ($free free on $fs)"
        echo -e "$out"
    done
}

# Get information on current system
ii() {
    local TOP mounts
    TOP=$(top -n 1 -o %CPU | sed '/^$/d' | head -n 12 | tail -n 11)
    echo
    echo -e "${T_BBLUE}$USER${T_RESET} is logged on ${T_BBLUE}$HOSTNAME${T_RESET}"
    echo -e "${T_BBLUE}Additionnal information :${T_RESET} " ; uname -a
    echo -e "${T_BBLUE}Users logged on :${T_RESET} " ;
        who | cut -d " " -f1 | sort | uniq
    echo -e "${T_BBLUE}Current date :${T_RESET} " ; date
    echo -e "${T_BBLUE}Machine stats :${T_RESET} " ; uptime
    echo -e "${T_BBLUE}Diskspace :${T_RESET} "
    #if valid_name dfc; then
        #dfc
    #else
        mounts=$(mount -v | awk '/\/dev\/s/ { print $3 }')
        prettyDf "$mounts"
    #fi
    echo -e "${T_BBLUE}Memory stats :${T_RESET} " ; free -h
    echo -e "${T_BBLUE}Top 5 CPU% :${T_RESET} " ; echo -e "$TOP" | head -n 2 ; echo -e "$TOP" | tail -n 6
    echo -e "${T_BBLUE}Top 5 MEM% :${T_RESET} " ; top -n 1 -o %MEM | sed '/^$/d' | head -n 12 | tail -n 5
    echo -e "${T_BBLUE}Network Interfaces :${T_RESET}" ; listNics
    echo -e "${T_BBLUE}Open connections :${T_RESET} "; netstat -pan --inet;
    echo
}

# Use to swap active IntelliJ install
swap_intelli() {
    if [ "$ACTIVE_INTELLI" = "$INTELLI_ANDROID" ]; then
        export ACTIVE_INTELLI=$INTELLI_J
        export PATH="${PATH//$INTELLI_ANDROID/$INTELLI_J}"
    elif [ "$ACTIVE_INTELLI" = "$INTELLI_J" ]; then
        export ACTIVE_INTELLI=$INTELLI_ANDROID
        export PATH="${PATH//$INTELLI_J/$INTELLI_ANDROID}"
    fi
}

# Highlight many terms with different colors
# Usage: find . | h term1 term2 term3
. ~/.shell/hhighlighter/h.sh
# }}}
############################################################################
# Misc Options
############################################################################
#{{{
# Enable the windows key on Ubuntu as F13
if valid_name xmodmap && [ -n "$DISPLAY" ]; then
    xmodmap -e 'keycode 133 = F13'
fi

# Disable the Ctrl+s/q button that freezes terminal output.
if valid_name stty; then
    stty -ixon
fi

# Set bash tabstop to 4 spaces, default is 8 too wide
if valid_name tabs; then
    tabs 4
fi
#}}}

# vim:set filetype=sh foldmethod=marker:
